
#line 2 "fuzzy_scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 106
#define YY_END_OF_BUFFER 107
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[273] =
    {   0,
        0,    0,    0,    0,    8,    8,    5,    5,    2,    2,
      107,  105,   13,   14,   30,   91,  105,   19,  105,   20,
       21,   17,   16,   25,   15,   27,   18,   90,   29,   26,
       41,   33,   39,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,   22,   23,   24,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,   61,
      105,   62,  103,   93,   92,  106,    8,    9,   10,    5,
        6,    3,    2,  106,   13,   14,   44,    0,   38,   46,
       36,   31,   34,   32,   35,    7,    4,   37,   89,   90,
       28,   79,   43,   45,   76,   42,   40,  104,  104,  104,

      104,  104,  104,  104,  104,   87,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   50,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,   47,  103,  101,  102,   94,
       95,   99,  100,   96,   98,   97,    8,    9,   10,   11,
       10,   12,    5,    3,    2,    0,   89,   86,   83,  104,
      104,   88,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,   53,  104,   72,  104,
      104,   78,  104,  104,  104,  104,  104,  104,  104,  104,
      104,   94,   95,    0,  104,  104,  104,  104,  104,  104,

       80,   70,  104,   57,  104,  104,  104,   51,   59,  104,
      104,  104,  104,  104,   75,  104,  104,  104,   67,   48,
       63,  104,   94,    0,  104,  104,  104,  104,  104,  104,
       54,  104,  104,  104,   49,   71,  104,   64,  104,  104,
      104,  104,   52,    0,  104,   84,   69,   85,   82,   68,
      104,  104,  104,  104,   65,   60,   66,   56,   74,    0,
      104,  104,   58,  104,  104,    1,  104,   55,   77,   73,
       81,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    1,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   18,   18,   19,   20,   21,
       22,   23,    1,    1,   24,   25,   26,   27,   28,   26,
       26,   26,   29,   26,   26,   30,   31,   32,   33,   26,
       26,   34,   35,   36,   26,   37,   26,   38,   39,   26,
       40,   41,   42,   43,   26,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   26,   53,   54,   55,   56,
       57,   58,   26,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    1,    1,
        5,    1,    1,    1,    1,    1,    6,    6,    1,    1,
        1,    1,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    1,
        4,    1,    1,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1
    } ;

static const flex_int16_t yy_base[285] =
    {   0,
        0,    0,   68,   69,   72,   73,  333,  328,   75,   77,
      327,  747,  302,  293,  260,  747,  196,  217,  224,  747,
      747,  189,   69,  747,   68,  747,   76,   71,   74,  747,
      186,   72,   77,   84,   86,   88,   90,   94,   96,  100,
      102,  104,  107,  747,  747,  747,  109,  119,  121,  123,
      127,  125,  129,  131,  134,  136,  144,  138,  161,  747,
      135,  747,    0,  747,  747,  188,  198,  747,  156,    0,
      747,    0,  192,  747,  181,  177,  747,  119,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  747,  168,  192,
      747,  747,  747,  747,  747,  747,  747,    0,  181,  196,

      198,  200,  202,  204,  207,  209,  211,  213,  225,  233,
      228,  235,  237,  239,  241,  243,  246,  248,  251,  253,
      255,  257,  259,  261,  263,  269,  271,  274,  276,  281,
      284,  290,  293,  296,  299,  747,    0,  747,  747,  301,
      306,  747,  747,  747,  747,  747,  167,  747,  318,  747,
      334,  747,    0,    0,  162,  114,  308,  321,  323,  325,
      329,  335,  339,  343,  345,  349,  351,  353,  360,  357,
      362,  364,  368,  370,  374,  376,  378,  380,  382,  385,
      392,  394,  398,  402,  404,  407,  409,  412,  414,  416,
      420,  422,  424,  103,  428,  434,  436,  441,  455,  458,

      460,  462,  464,  468,  470,  472,  474,  476,  478,  480,
      482,  485,  488,  491,  493,  495,  498,  503,  501,  506,
      508,  513,  518,   88,  521,  525,  528,  537,  539,  541,
      545,  547,  550,  552,  554,  556,  560,  562,  564,  566,
      568,  571,  575,   86,  577,  579,  581,  584,  589,  591,
      593,  595,  597,  600,  606,  611,  613,  615,  617,   83,
      619,  621,  623,  625,  627,  747,  629,  633,  635,  642,
      644,  747,  686,  692,  698,  704,   91,  710,  716,  722,
      728,  734,  740,   79
    } ;

static const flex_int16_t yy_def[285] =
    {   0,
      272,    1,  273,  273,  274,  274,  275,  275,  276,  276,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  272,  272,  272,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  272,
      272,  272,  278,  272,  272,  279,  280,  272,  281,  282,
      272,  283,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  284,  277,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  272,  278,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  280,  272,  281,  272,
      281,  272,  282,  283,  272,  272,  272,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  272,  272,  272,  277,  277,  277,  277,  277,  277,

      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  272,  272,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  272,  277,  277,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  272,
      277,  277,  277,  277,  277,  272,  277,  277,  277,  277,
      277,    0,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272
    } ;

static const flex_int16_t yy_nxt[818] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   36,   37,   36,   38,
       36,   39,   40,   41,   42,   36,   43,   36,   36,   44,
       12,   45,   46,   36,   47,   48,   49,   50,   51,   36,
       36,   52,   36,   36,   36,   36,   53,   54,   55,   56,
       57,   36,   58,   59,   36,   36,   36,   60,   61,   62,
       64,   64,   65,   65,   68,   68,   73,   74,   73,   74,
       82,   84,   69,   69,   98,   89,   86,   90,   90,   85,
       83,   87,   91,   94,   95,   92,   99,   88,   96,   97,

       98,   98,   98,   98,   98,   98,   98,   98,   66,   66,
       98,   98,   98,   98,  101,  100,   98,   98,   98,   98,
       98,   98,  103,   98,   98,   98,   98,  102,  104,  107,
      266,  108,  260,  106,  110,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  244,
       98,   98,   98,   98,   98,   98,  224,  105,  150,  194,
       98,   98,  113,  155,  109,  111,  151,  112,  115,  148,
      119,  152,  116,  122,  156,  114,  117,   98,   98,   76,
      123,  127,   75,  120,  157,  157,  124,  118,  121,  125,
      139,  132,  126,  155,  134,  128,  129,   98,   98,  130,

      148,  131,  133,  136,  140,  141,   89,   93,   90,   90,
       81,  135,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,  158,   98,   98,   98,   98,   98,   98,   98,
       98,   80,  142,  159,  164,  160,  143,  161,   79,  162,
      165,   98,   98,  144,   98,   98,  145,   78,  146,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,  163,   98,   98,   98,   98,  167,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   77,  169,  166,  168,   98,   98,   98,   98,  172,
       98,   98,   98,   98,  171,   76,  170,   98,   98,  175,

       98,   98,  173,   75,  176,  174,   98,   98,  180,   98,
       98,  177,   98,   98,  181,   98,   98,  192,  193,  179,
      150,  178,  193,  193,  157,  157,  272,  184,  272,  182,
       71,  183,  186,  272,  185,   71,  150,   98,   98,   98,
       98,   98,   98,  187,  151,   98,   98,  190,  188,  152,
      191,   98,   98,  272,  189,   98,   98,  272,  195,   98,
       98,   98,   98,  272,  196,   98,   98,   98,   98,   98,
       98,  272,  198,   98,   98,  199,   98,   98,   98,   98,
       98,   98,  272,  197,   98,   98,   98,   98,  272,  201,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

      200,   98,   98,  203,  204,  272,  202,  206,   98,   98,
       98,   98,  272,  207,   98,   98,  272,  208,   98,   98,
       98,   98,  205,   98,   98,   98,   98,  272,   98,   98,
       98,   98,   98,   98,  209,  210,   98,   98,  223,  193,
      193,  193,  272,  212,   98,   98,  211,  213,  272,  215,
       98,   98,   98,   98,  272,  225,  272,   98,   98,  214,
      272,  220,  221,  226,  272,  216,  219,  217,  272,  218,
      228,   98,   98,  222,   98,   98,   98,   98,   98,   98,
       98,   98,  229,  227,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

      272,   98,   98,  272,   98,   98,  272,   98,   98,   98,
       98,   98,   98,  230,   98,   98,  231,   98,   98,   98,
       98,  232,   98,   98,   98,   98,  272,  235,  237,   98,
       98,  272,  234,  233,  193,  193,  272,   98,   98,  272,
      240,   98,   98,  241,   98,   98,  272,  236,  238,  239,
      242,  245,  246,   98,   98,   98,   98,   98,   98,  272,
      243,   98,   98,   98,   98,  249,   98,   98,   98,   98,
       98,   98,   98,   98,  272,  248,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  247,   98,   98,  272,
      250,   98,   98,   98,   98,   98,   98,   98,   98,  253,

       98,   98,  251,  252,  261,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,  272,   98,   98,  258,  256,
      254,  255,   98,   98,  272,  259,  257,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,  272,  267,   98,
       98,   98,   98,  272,  262,  263,  265,  264,   98,   98,
       98,   98,  272,  272,  272,  272,  272,  271,  268,  272,
      272,  272,  269,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  270,   63,   63,   63,   63,
       63,   63,   67,   67,   67,   67,   67,   67,   70,   70,

       70,   70,   70,   70,   72,   72,   72,   72,   72,   72,
      137,  137,  272,  272,  137,  137,  138,  138,  138,  138,
      138,  138,  147,  147,  147,  147,  272,  147,  149,  149,
      149,  149,  149,  149,  153,  153,  272,  153,  153,  153,
      154,  272,  272,  154,  154,  154,   11,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272
    } ;

static const flex_int16_t yy_chk[818] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    4,    3,    4,    5,    6,    9,    9,   10,   10,
       23,   25,    5,    6,  284,   28,   27,   28,   28,   25,
       23,   27,   29,   32,   32,   29,  277,   27,   33,   33,

       34,   34,   35,   35,   36,   36,   37,   37,    3,    4,
       38,   38,   39,   39,   35,   34,   40,   40,   41,   41,
       42,   42,   38,   43,   43,   47,   47,   37,   39,   41,
      260,   42,  244,   40,   43,   48,   48,   49,   49,   50,
       50,   52,   52,   51,   51,   53,   53,   54,   54,  224,
       55,   55,   56,   56,   58,   58,  194,   39,   69,  156,
       57,   57,   48,  155,   42,   47,   69,   47,   49,  147,
       51,   69,   49,   52,   78,   48,   50,   59,   59,   76,
       52,   55,   75,   51,   89,   89,   53,   50,   51,   54,
       66,   57,   54,   73,   58,   55,   56,   99,   99,   56,

       67,   56,   57,   61,   66,   66,   90,   31,   90,   90,
       22,   59,  100,  100,  101,  101,  102,  102,  103,  103,
      104,  104,  100,  105,  105,  106,  106,  107,  107,  108,
      108,   19,   66,  101,  107,  102,   66,  103,   18,  104,
      108,  109,  109,   66,  111,  111,   66,   17,   66,  110,
      110,  112,  112,  113,  113,  114,  114,  115,  115,  116,
      116,  105,  117,  117,  118,  118,  110,  119,  119,  120,
      120,  121,  121,  122,  122,  123,  123,  124,  124,  125,
      125,   15,  112,  109,  111,  126,  126,  127,  127,  115,
      128,  128,  129,  129,  114,   14,  113,  130,  130,  118,

      131,  131,  116,   13,  119,  117,  132,  132,  124,  133,
      133,  120,  134,  134,  125,  135,  135,  140,  140,  123,
      149,  121,  141,  141,  157,  157,   11,  128,  149,  126,
        8,  127,  130,  149,  129,    7,  151,  158,  158,  159,
      159,  160,  160,  131,  151,  161,  161,  134,  132,  151,
      135,  162,  162,    0,  133,  163,  163,    0,  160,  164,
      164,  165,  165,    0,  161,  166,  166,  167,  167,  168,
      168,    0,  164,  170,  170,  165,  169,  169,  171,  171,
      172,  172,    0,  163,  173,  173,  174,  174,    0,  167,
      175,  175,  176,  176,  177,  177,  178,  178,  179,  179,

      166,  180,  180,  169,  170,    0,  168,  172,  181,  181,
      182,  182,    0,  173,  183,  183,    0,  174,  184,  184,
      185,  185,  171,  186,  186,  187,  187,    0,  188,  188,
      189,  189,  190,  190,  175,  176,  191,  191,  192,  192,
      193,  193,    0,  180,  195,  195,  178,  181,    0,  184,
      196,  196,  197,  197,    0,  195,    0,  198,  198,  183,
        0,  189,  190,  196,    0,  185,  188,  186,    0,  187,
      198,  199,  199,  191,  200,  200,  201,  201,  202,  202,
      203,  203,  199,  197,  204,  204,  205,  205,  206,  206,
      207,  207,  208,  208,  209,  209,  210,  210,  211,  211,

        0,  212,  212,    0,  213,  213,    0,  214,  214,  215,
      215,  216,  216,  200,  217,  217,  203,  219,  219,  218,
      218,  205,  220,  220,  221,  221,    0,  210,  212,  222,
      222,    0,  207,  206,  223,  223,    0,  225,  225,    0,
      216,  226,  226,  217,  227,  227,    0,  211,  213,  214,
      218,  225,  226,  228,  228,  229,  229,  230,  230,    0,
      222,  231,  231,  232,  232,  229,  233,  233,  234,  234,
      235,  235,  236,  236,    0,  228,  237,  237,  238,  238,
      239,  239,  240,  240,  241,  241,  227,  242,  242,    0,
      230,  243,  243,  245,  245,  246,  246,  247,  247,  234,

      248,  248,  232,  233,  245,  249,  249,  250,  250,  251,
      251,  252,  252,  253,  253,    0,  254,  254,  241,  239,
      237,  238,  255,  255,    0,  242,  240,  256,  256,  257,
      257,  258,  258,  259,  259,  261,  261,  262,  262,  263,
      263,  264,  264,  265,  265,  267,  267,    0,  261,  268,
      268,  269,  269,    0,  251,  252,  254,  253,  270,  270,
      271,  271,    0,    0,    0,    0,    0,  267,  262,    0,
        0,    0,  264,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  265,  273,  273,  273,  273,
      273,  273,  274,  274,  274,  274,  274,  274,  275,  275,

      275,  275,  275,  275,  276,  276,  276,  276,  276,  276,
      278,  278,    0,    0,  278,  278,  279,  279,  279,  279,
      279,  279,  280,  280,  280,  280,    0,  280,  281,  281,
      281,  281,  281,  281,  282,  282,    0,  282,  282,  282,
      283,    0,    0,  283,  283,  283,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[106] =
    {   0,
       78,   80,   81,  112,  115,  116,  122,  125,  126,  127,
      128,  129,  132,  133,  135,  136,  137,  138,  139,  140,
      141,  142,  143,  144,  145,  146,  147,  148,  149,  150,
      151,  152,  153,  157,  161,  165,  169,  173,  177,  189,
      193,  197,  201,  205,  209,  213,  216,  219,  223,  228,
      229,  230,  231,  232,  233,  234,  235,  236,  237,  238,
      239,  240,  241,  242,  243,  244,  245,  246,  247,  248,
      249,  250,  251,  252,  257,  258,  259,  260,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  270,  272,  286,
      292,  308,  320,  328,  344,  352,  353,  354,  355,  356,

      358,  359,  361,  369,  375
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "fuzzy_scanner.ll"
/*
  fuzzy - The implementation of the FUZZY programming language

  File: fuzzy_scanner.ll

  Copyright (C) 2016-2018 Omarine <phamtyn@gmail.com>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program. If not, see <http://www.gnu.org/licenses/>.
*/
#line 23 "fuzzy_scanner.ll"
# include <cerrno>
# include <climits>
# include <cstdlib>
# include <string>
# include "fuzzy_driver.hh"
# include "fuzzy_parser.hh"
# include <assert.h>

# undef yywrap
# define yywrap() 1

// The location of the current token.

#line 845 "fuzzy_scanner.cc"

#line 53 "fuzzy_scanner.ll"
	// Code run each time a pattern is matched.
	# define YY_USER_ACTION  YYLLOC->columns (yyleng);
	
	void yy_switch_to_buffer_ ( YY_BUFFER_STATE new_buffer )
	{
		yy_switch_to_buffer(new_buffer);
	}
	void yy_delete_buffer_()
	{
		yy_delete_buffer( YY_CURRENT_BUFFER );
	}
	YY_BUFFER_STATE yy_create_buffer_()
	{
		return yy_create_buffer( yyin, YY_BUF_SIZE );
	}
	
#line 864 "fuzzy_scanner.cc"
#line 865 "fuzzy_scanner.cc"

#define INITIAL 0
#define quote 1
#define comment 2
#define commentcc 3
#define incl 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 71 "fuzzy_scanner.ll"


#line 74 "fuzzy_scanner.ll"
	char *string_buf;
	char *string_buf_ptr;
	

#line 1155 "fuzzy_scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 273 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 272 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 106 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 106 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 107 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 78 "fuzzy_scanner.ll"
BEGIN(incl);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 80 "fuzzy_scanner.ll"
YYLLOC->step ();/* eat the whitespace */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 81 "fuzzy_scanner.ll"
{ /* got the include file name */

			include_data data;
			data.loc = *YYLLOC;
			data.buffer = YY_CURRENT_BUFFER;
			driver->list.AddTail(data);
			
			string filename = yytext + 1;
			filename.resize(yyleng - 2);
			yyin = fopen( filename.data(), "r" );

			if ( ! yyin )
			{
				string notice = filename + ": No such file or directory";
				YYLLOC->begin += 1;
				YYLLOC->end -= 1;
				driver->error(*YYLLOC, notice);
				exit(EXIT_FAILURE);
			}

			driver->filenames.AddTail(filename);
			YYLLOC->step ();
			BEGIN(INITIAL);
			return yy::fuzzy_parser::token::TOK_BOF;
		}
	YY_BREAK

  // Code run each time yylex is called.
  YYLLOC->step ();

case 4:
YY_RULE_SETUP
#line 112 "fuzzy_scanner.ll"
BEGIN(commentcc);
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 115 "fuzzy_scanner.ll"

	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 116 "fuzzy_scanner.ll"
{
			YYLLOC->lines (1); YYLLOC->step ();
			BEGIN(INITIAL);
			}
	YY_BREAK

case 7:
YY_RULE_SETUP
#line 122 "fuzzy_scanner.ll"
BEGIN(comment);
	YY_BREAK

case 8:
YY_RULE_SETUP
#line 125 "fuzzy_scanner.ll"

	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 126 "fuzzy_scanner.ll"
YYLLOC->lines (1); YYLLOC->step ();
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 127 "fuzzy_scanner.ll"

	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 128 "fuzzy_scanner.ll"
YYLLOC->lines (1); YYLLOC->step ();
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 129 "fuzzy_scanner.ll"
BEGIN(INITIAL);
	YY_BREAK

case 13:
YY_RULE_SETUP
#line 132 "fuzzy_scanner.ll"
YYLLOC->step ();
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 133 "fuzzy_scanner.ll"
YYLLOC->lines (yyleng); YYLLOC->step ();
	YY_BREAK
/* \\\n  	YYLLOC->lines (1); YYLLOC->step ();*/
case 15:
YY_RULE_SETUP
#line 135 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_MINUS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 136 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_PLUS;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 137 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_STAR;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 138 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_SLASH;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 139 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_MOD;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 140 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_LPAREN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 141 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_RPAREN;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 142 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_LBRACKET;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 143 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_RBRACKET;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 144 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_POW;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 145 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_COMMA;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 146 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_SEMI;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 147 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_DOT;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 148 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_SCOPE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 149 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_COLON;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 150 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_NOT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 151 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_PLUSPLUS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 152 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_MINUSMINUS;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 153 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_assign;
  return yy::fuzzy_parser::token::TOK_ASSIGNOP;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 157 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_assign_plus;
  return yy::fuzzy_parser::token::TOK_ASSIGNOP;
}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 161 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_assign_minus;
  return yy::fuzzy_parser::token::TOK_ASSIGNOP;
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 165 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_assign_multive;
  return yy::fuzzy_parser::token::TOK_ASSIGNOP;
}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 169 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_assign_quotient;
  return yy::fuzzy_parser::token::TOK_ASSIGNOP;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 173 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_assign_mod;
  return yy::fuzzy_parser::token::TOK_ASSIGNOP;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "fuzzy_scanner.ll"
{
  if(driver->want_redirect)
  {
      YYLVAL->Node_type = Node_redirect_output;
      return yy::fuzzy_parser::token::TOK_REDIRECT_OP;
  }
  else
  {
      YYLVAL->Node_type = Node_greater;
      return yy::fuzzy_parser::token::TOK_RELOP;
  }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 189 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_redirect_append;
  return yy::fuzzy_parser::token::TOK_REDIRECT_OP;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 193 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_less;
  return yy::fuzzy_parser::token::TOK_RELOP;
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 197 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_ge;
  return yy::fuzzy_parser::token::TOK_RELOP;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 201 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_le;
  return yy::fuzzy_parser::token::TOK_RELOP;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 205 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_notequal;
  return yy::fuzzy_parser::token::TOK_RELOP;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 209 "fuzzy_scanner.ll"
{
  YYLVAL->Node_type = Node_equal;
  return yy::fuzzy_parser::token::TOK_RELOP;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 213 "fuzzy_scanner.ll"
{
  return yy::fuzzy_parser::token::TOK_AND;
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 216 "fuzzy_scanner.ll"
{
  return yy::fuzzy_parser::token::TOK_OR;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 219 "fuzzy_scanner.ll"
{
  YYLVAL->bval = true;
  return yy::fuzzy_parser::token::TOK_BOOLEN;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 223 "fuzzy_scanner.ll"
{
  YYLVAL->bval = false;
  return yy::fuzzy_parser::token::TOK_BOOLEN;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 228 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_IF;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 229 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_ELSE;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 230 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_WHILE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 231 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_FOR;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 232 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_BREAK;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 233 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_CONTINUE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 234 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_SWITCH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 235 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_CASE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 236 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_DEFAULT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 237 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_EXIT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 238 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_RETURN;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 239 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_LBRACE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 240 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_RBRACE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 241 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_VOID;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 242 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_PRINT;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 243 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_PRINT_SET;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 244 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_STRUCT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 245 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_TERM;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 246 "fuzzy_scanner.ll"
YYLVAL->sval = yytext; return yy::fuzzy_parser::token::TOK_STRING_KEY;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 247 "fuzzy_scanner.ll"
YYLVAL->sval = yytext; return yy::fuzzy_parser::token::TOK_NUMBER_KEY;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 248 "fuzzy_scanner.ll"
YYLVAL->sval = yytext; return yy::fuzzy_parser::token::TOK_BOOL_KEY;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 249 "fuzzy_scanner.ll"
YYLVAL->sval = yytext; return yy::fuzzy_parser::token::TOK_FUZZY_KEY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 250 "fuzzy_scanner.ll"
YYLVAL->sval = yytext; return yy::fuzzy_parser::token::TOK_INT_KEY;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 251 "fuzzy_scanner.ll"
YYLVAL->sval = yytext; return yy::fuzzy_parser::token::TOK_OPERATOR;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 252 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_SYSTEM;
	YY_BREAK
/* "system"    {
  driver->error (*YYLLOC, "Online version does not support the keyword `system'");
  exit(EXIT_FAILURE);
} */
case 75:
YY_RULE_SETUP
#line 257 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_RULE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 258 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_DEDUCE;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 259 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_DISCRETE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 260 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_PUT;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 261 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_ASSIGN_FUZ;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 262 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_VERY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 263 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_EXTREMELY;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 264 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_SEEMED;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 265 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_BIT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 266 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_LITTLE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 267 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_REALLY;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 268 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_AND_FUZ;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 269 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_OR_FUZ;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 270 "fuzzy_scanner.ll"
return yy::fuzzy_parser::token::TOK_NOT_FUZ;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 272 "fuzzy_scanner.ll"
{
  errno = 0;
  double val = strtod (yytext, NULL);
  if (! (val > -HUGE_VALF && val < HUGE_VALF && errno != ERANGE))
  {
    driver->error (*YYLLOC, "Number is out of range.");
    //yyterminate();
    //exit (EXIT_FAILURE);
  }
  
  YYLVAL->dval=val;
  return yy::fuzzy_parser::token::TOK_NUM;
}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 286 "fuzzy_scanner.ll"
{
  long val = atol (yytext);
  YYLVAL->lval=val;
  return yy::fuzzy_parser::token::TOK_INT;
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 292 "fuzzy_scanner.ll"
{  
  char *p = yy_c_buf_p + 1;
  int i = 0;

  while((*p != '"' || *(p - 1) == '\\') && *p != 0)
  {
    p++;
    i++;
  }
  
  string_buf = new char[i + 1];
  string_buf_ptr = string_buf; 
  BEGIN(quote);
}
	YY_BREAK

case 92:
YY_RULE_SETUP
#line 308 "fuzzy_scanner.ll"
{ 
	/* saw closing quote - all done */
	BEGIN(INITIAL);
	*string_buf_ptr = '\0';
	YYLVAL->sval = string_buf;
	delete string_buf;
	return yy::fuzzy_parser::token::TOK_STRING;
	/* return string constant token type and
	* value to parser
	*/
	}
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 320 "fuzzy_scanner.ll"
{
	driver->error (*YYLLOC, "unterminated string constant");
	exit(EXIT_FAILURE);
	/* error - unterminated string constant */
	/* generate error message */
	//YYLLOC->lines (1); YYLLOC->step ();
	}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 328 "fuzzy_scanner.ll"
{
	/* octal escape sequence */
	int result;

	(void) sscanf( yytext + 1, "%o", &result );

	if ( result > 0xff )
		/* error, constant is out-of-bounds */
		{
		  driver->error (*YYLLOC, "constant is out-of-bounds");
		  exit(EXIT_FAILURE);
		}

	*string_buf_ptr++ = result;
	}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 344 "fuzzy_scanner.ll"
{
	/* generate error - bad escape sequence; something
	* like '\48' or '\0777777'
	*/
	driver->error (*YYLLOC, "bad escape sequence");
	exit(EXIT_FAILURE);
	}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 352 "fuzzy_scanner.ll"
*string_buf_ptr++ = '\n';
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 353 "fuzzy_scanner.ll"
*string_buf_ptr++ = '\t';
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 354 "fuzzy_scanner.ll"
*string_buf_ptr++ = '\r';
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 355 "fuzzy_scanner.ll"
*string_buf_ptr++ = '\b';
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 356 "fuzzy_scanner.ll"
*string_buf_ptr++ = '\f';
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 358 "fuzzy_scanner.ll"
*string_buf_ptr++ = yytext[1];
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 359 "fuzzy_scanner.ll"
YYLLOC->lines (1); YYLLOC->step ();
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 361 "fuzzy_scanner.ll"
{
	char *yptr = yytext;

	while ( *yptr )
		*string_buf_ptr++ = *yptr++;
	}
	YY_BREAK

case 104:
YY_RULE_SETUP
#line 369 "fuzzy_scanner.ll"
{
  
	YYLVAL->sval = yytext;
	return yy::fuzzy_parser::token::TOK_NAME;
}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 375 "fuzzy_scanner.ll"
driver->error (*YYLLOC, "invalid character");
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(quote):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(commentcc):
case YY_STATE_EOF(incl):
#line 377 "fuzzy_scanner.ll"
{
	if ( driver->list.IsEmpty() )
	    return yy::fuzzy_parser::token::TOK_END;
	
	return yy::fuzzy_parser::token::TOK_END_I_FILE;
}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 383 "fuzzy_scanner.ll"
ECHO;
	YY_BREAK
#line 1953 "fuzzy_scanner.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 273 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 273 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 272);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 383 "fuzzy_scanner.ll"


void
fuzzy_driver::scan_begin ()
{
  yy_flex_debug = trace_scanning;
  if (file.empty () || file == "-")
    yyin = stdin;
  else if (!(yyin = fopen (file.c_str (), "r")))
    {
      error ("cannot open " + file + ": " + strerror(errno));
      exit (EXIT_FAILURE);
    }
}

void
fuzzy_driver::scan_end ()
{
  fclose (yyin);
}


